# ==============================================================================
#           ОДИНОЧНЫЙ БЭКТЕСТ ТОРГОВОЙ СТРАТЕГИИ
# ==============================================================================
import pandas as pd
import vectorbt as vbt
import logging
import sys
from datetime import datetime
from dataclasses import dataclass
from typing import Dict, Any, Tuple

# --- КОНФИГУРАЦИЯ БЭКТЕСТА ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)


@dataclass(frozen=True)
class Config:
    TICKER: str = 'HEAD'
    START_DATE: str = '2023-09-25'
    END_DATE: str = '2024-09-25'
    INITIAL_CAPITAL: float = 20000.0
    COMMISSION_PERCENT: float = 0.0005
    SLIPPAGE_PERCENT: float = 0.0005
    CAPITAL_SHARE_TO_USE: float = 0.99
    EMERGENCY_SL_PERCENT: float = 10.0


# --- ПАРАМЕТРЫ СТРАТЕГИИ (из Шага 1 WFA) ---
STRATEGY_PARAMS = {
    'bb_std': 2.7,
    'adx_threshold': 23,
    'bb_window': 48,
    'volume_sma_period': 52,
    'volume_multiplier': 1.6,
    'adx_window': 19
}


# --- ЗАГРУЗКА ДАННЫХ (логика полностью идентична оптимизатору) ---
def load_and_prepare_data(ticker: str) -> Tuple[pd.DataFrame, pd.DataFrame]:
    file_path = f'{ticker}_data.csv'
    try:
        df_full = pd.read_csv(file_path, parse_dates=['time'], index_col='time')
        if df_full.index.tz is None: df_full = df_full.tz_localize('UTC')
        df_1m = df_full[df_full['timeframe'] == '1m'].drop(columns=['timeframe'])
        df_5m = df_full[df_full['timeframe'] == '5m'].drop(columns=['timeframe'])
        rename_map = {'open': 'Open', 'high': 'High', 'low': 'Low', 'close': 'Close', 'volume': 'Volume'}
        df_1m, df_5m = df_1m.rename(columns=rename_map), df_5m.rename(columns=rename_map)
        logging.info(f"Данные для {ticker} успешно загружены: {len(df_1m)} 1m баров, {len(df_5m)} 5m баров.")
        return df_1m, df_5m
    except FileNotFoundError:
        logging.error(f"Файл с данными '{file_path}' не найден. Работа прервана.");
        sys.exit(1)


# --- ДВИЖОК БЭКТЕСТА (логика полностью идентична оптимизатору) ---
def run_backtest(df_1m: pd.DataFrame, df_5m: pd.DataFrame, params: Dict[str, Any], config: Config):
    """
    Возвращает объект portfolio для дальнейшего анализа и визуализации.
    """
    if df_1m.empty or df_5m.empty:
        logging.warning("Нет данных для проведения бэктеста.")
        return None

    high_5m, low_5m, close_5m, volume_5m = df_5m['High'], df_5m['Low'], df_5m['Close'], df_5m['Volume']

    # Расчет индикаторов
    bollinger = vbt.BBANDS.run(close_5m, window=params['bb_window'], alpha=params['bb_std'])
    upper_band, middle_band, lower_band = bollinger.upper, bollinger.middle, bollinger.lower
    volume_sma = vbt.MA.run(volume_5m, window=params['volume_sma_period']).ma
    volume_filter = (volume_5m <= volume_sma * params['volume_multiplier'])
    ADX_factory = vbt.IndicatorFactory.from_talib('ADX')
    adx_indicator = ADX_factory.run(high_5m, low_5m, close_5m, timeperiod=params['adx_window'])
    adx_filter = adx_indicator.real < params['adx_threshold']

    # Генерация сигналов на 5-минутном ТФ (без изменений)
    long_entry_candidates = close_5m.shift(1) <= lower_band.shift(1)
    short_entry_candidates = close_5m.shift(1) >= upper_band.shift(1)
    entry_filter = volume_filter.shift(1) & adx_filter.shift(1)
    long_entries_5m = long_entry_candidates & entry_filter
    short_entries_5m = short_entry_candidates & entry_filter
    long_exits_5m = close_5m.shift(1) >= middle_band.shift(1)
    short_exits_5m = close_5m.shift(1) <= middle_band.shift(1)


    # Перенос сигналов на 1-минутный ТФ (и остальной код без изменений)
    long_entries_raw = long_entries_5m.reindex(df_1m.index, method='ffill', fill_value=False)
    short_entries_raw = short_entries_5m.reindex(df_1m.index, method='ffill', fill_value=False)
    long_exits_raw = long_exits_5m.reindex(df_1m.index, method='ffill', fill_value=False)
    short_exits_raw = short_exits_5m.reindex(df_1m.index, method='ffill', fill_value=False)

    long_entries = long_entries_raw.vbt.signals.fshift(1)
    short_entries = short_entries_raw.vbt.signals.fshift(1)
    long_exits = long_exits_raw.vbt.signals.fshift(1)
    short_exits = short_exits_raw.vbt.signals.fshift(1)

    # Расчет портфеля
    portfolio = vbt.Portfolio.from_signals(
        close=df_1m['Close'], entries=long_entries, exits=long_exits,
        short_entries=short_entries, short_exits=short_exits,
        upon_opposite_entry='close',
        size=config.CAPITAL_SHARE_TO_USE,
        size_type='percent',
        sl_stop=config.EMERGENCY_SL_PERCENT / 100.0,
        init_cash=config.INITIAL_CAPITAL,
        fees=config.COMMISSION_PERCENT,
        slippage=config.SLIPPAGE_PERCENT,
        freq='min'
    )
    return portfolio


# --- ГЛАВНАЯ ФУНКЦИЯ ---
def main():
    config = Config()
    logging.info(f"Запуск бэктеста для тикера: {config.TICKER}")
    logging.info(f"Период: {config.START_DATE} - {config.END_DATE}")
    logging.info("Используемые параметры стратегии:")
    for k, v in STRATEGY_PARAMS.items():
        logging.info(f"    {k}: {v}")

    # Загрузка и подготовка данных
    df_1m_full, df_5m_full = load_and_prepare_data(config.TICKER)

    # Фильтрация данных по датам
    df_1m = df_1m_full.loc[config.START_DATE:config.END_DATE]
    df_5m = df_5m_full.loc[config.START_DATE:config.END_DATE]

    # Запуск бэктеста
    portfolio = run_backtest(df_1m, df_5m, STRATEGY_PARAMS, config)

    if portfolio is None or portfolio.trades.records.size == 0:
        logging.warning("Бэктест не дал ни одной сделки. Анализ невозможен.")
        return

    # Вывод результатов
    logging.info("\n" + "=" * 80)
    logging.info("--- РЕЗУЛЬТАТЫ БЭКТЕСТА ---")

    # 1. Детальная статистика (уже есть)
    stats = portfolio.stats()
    logging.info("Детальная статистика:\n" + str(stats))

    # --- НОВЫЙ БЛОК: ГЛУБОКИЙ АНАЛИЗ СДЕЛОК ---
    trades_df = portfolio.trades.records_readable

    if not trades_df.empty:
        logging.info("\n" + "=" * 80)
        logging.info("--- ГЛУБОКИЙ АНАЛИЗ СДЕЛОК ---")

        # Анализ по направлениям (Long vs Short)
        long_trades = trades_df[trades_df['Direction'] == 'Long']
        short_trades = trades_df[trades_df['Direction'] == 'Short']

        def analyze_direction(df, direction_name):
            if df.empty:
                logging.info(f"\nАнализ для {direction_name}: Сделок не было.")
                return

            num_trades = len(df)
            win_rate = (df['PnL'] > 0).sum() / num_trades * 100 if num_trades > 0 else 0
            total_pnl = df['PnL'].sum()
            gross_profit = df[df['PnL'] > 0]['PnL'].sum()
            gross_loss = abs(df[df['PnL'] < 0]['PnL'].sum())
            profit_factor = gross_profit / gross_loss if gross_loss > 0 else float('inf')

            logging.info(f"\nАнализ для {direction_name}:")
            logging.info(f"    Количество сделок: {num_trades}")
            logging.info(f"    Процент прибыльных: {win_rate:.2f}%")
            logging.info(f"    Суммарный PnL: {total_pnl:.2f}")
            logging.info(f"    Фактор прибыли: {profit_factor:.2f}")

        analyze_direction(long_trades, "Long")
        analyze_direction(short_trades, "Short")

        # Анализ ТОП-10 самых прибыльных сделок
        top_10_profit_trades = trades_df.nlargest(10, 'PnL')

        logging.info("\n" + "=" * 80)
        logging.info("--- ТОП-10 САМЫХ ПРИБЫЛЬНЫХ СДЕЛОК ---")
        # Выводим только самые важные колонки для краткости
        # Стало:
        columns_to_show = ['Entry Timestamp', 'Exit Timestamp', 'Direction', 'Size', 'Avg Entry Price',
                           'Avg Exit Price', 'PnL', 'Return']
        logging.info("\n" + top_10_profit_trades[columns_to_show].to_string())

    logging.info("\n" + "=" * 80)

    # 2. Сохранение сделок в CSV
    trades_df = portfolio.trades.records_readable
    output_filename = f'{config.TICKER}_backtest_trades_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
    trades_df.to_csv(output_filename, index=False)
    logging.info(f"\nВсе сделки ({len(trades_df)} шт.) сохранены в файл: {output_filename}")

    # 3. Визуализация
    # Стало:
    # Правильный вариант:
    logging.info("Построение графика... (Может занять некоторое время)")
    fig = portfolio.plot(
        height=800,  # <-- Передаем напрямую
        title_text=f"Бэктест стратегии для {config.TICKER}",  # <-- Правильное имя аргумента для заголовка
        yaxis_title="Цена / Капитал",
        xaxis_title="Дата"
    )
    fig.show()
    logging.info("График отображен. Закройте окно/вкладку с графиком для завершения программы.")
    logging.info(f"--- Бэктест для {config.TICKER} завершен. ---")


if __name__ == "__main__":
    main()
