# ==============================================================================
#           АВТОМАТИЗИРОВАННЫЙ ОПТИМИЗАТОР ТОРГОВОЙ СТРАТЕГИИ
# ==============================================================================
import pandas as pd
import numpy as np
import vectorbt as vbt
import pandas_ta as ta
import optuna
import logging
import sys
from datetime import datetime
from dataclasses import dataclass
from typing import Dict, Any
from numba import njit  # Убедись, что этот импорт есть

# --- КОНФИГУРАЦИЯ ЛОГИРОВАНИЯ ---
log_filename = f'wfa_supertrend_log_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.FileHandler(log_filename),
        logging.StreamHandler(sys.stdout)
    ]
)
optuna.logging.set_verbosity(optuna.logging.WARNING)


# --- ЛОГИКА ВЫХОДА ---
@njit
def generate_stop_exits_nb(close: np.ndarray, entries: np.ndarray, short_entries: np.ndarray, sl_stop: float,
                           tsl_stop: float):
    exits = np.full_like(entries, False)
    short_exits = np.full_like(short_entries, False)

    # Для лонг-позиций
    in_long_position = False
    long_entry_price = 0.0
    trailing_high = 0.0
    for i in range(len(close)):
        if short_entries[i] and in_long_position:
            exits[i] = True
            in_long_position = False
        if in_long_position:
            if close[i] > trailing_high:
                trailing_high = close[i]
            if close[i] < long_entry_price * (1 - sl_stop):
                exits[i] = True
                in_long_position = False
            elif tsl_stop > 0 and close[i] < trailing_high * (1 - tsl_stop):
                exits[i] = True
                in_long_position = False
        if entries[i] and not in_long_position:
            in_long_position = True
            long_entry_price = close[i]
            trailing_high = close[i]

    # Для шорт-позиций
    in_short_position = False
    short_entry_price = 0.0
    trailing_low = np.inf
    for i in range(len(close)):
        if entries[i] and in_short_position:
            short_exits[i] = True
            in_short_position = False
        if in_short_position:
            if close[i] < trailing_low:
                trailing_low = close[i]
            if close[i] > short_entry_price * (1 + sl_stop):
                short_exits[i] = True
                in_short_position = False
            elif tsl_stop > 0 and close[i] > trailing_low * (1 + tsl_stop):
                short_exits[i] = True
                in_short_position = False
        if short_entries[i] and not in_short_position:
            in_short_position = True
            short_entry_price = close[i]
            trailing_low = close[i]

    return exits, short_exits


# --- КОНФИГУРАЦИЯ СТРАТЕГИИ И БЭКТЕСТА ---
@dataclass(frozen=True)
class Config:
    TICKER: str = 'T'
    START_DATE: str = '2020-01-10'
    END_DATE: str = '2025-06-25'
    TRAIN_YEARS: int = 2
    TEST_MONTHS: int = 12
    STEP_MONTHS: int = 12
    N_TRIALS_PER_STEP: int = 100  

    TRADE_MODE: str = 'LongAndShort'
    INITIAL_CAPITAL: float = 20000.0
    COMMISSION_PERCENT: float = 0.0005
    SLIPPAGE_PERCENT: float = 0.001
    CAPITAL_SHARE_TO_USE: float = 0.90
    EMERGENCY_SL_PERCENT: float = 10.0


# --- ЗАГРУЗКА ДАННЫХ ---
def load_and_prepare_data(ticker: str):
    file_path = f'{ticker}_data.csv'
    try:
        df_full = pd.read_csv(file_path, parse_dates=['time'], index_col='time')
        if df_full.index.tz is None: df_full = df_full.tz_localize('UTC')
        df_1m = df_full[df_full['timeframe'] == '1m'].drop(columns=['timeframe'])
        df_5m = df_full[df_full['timeframe'] == '5m'].drop(columns=['timeframe'])
        rename_map = {'open': 'Open', 'high': 'High', 'low': 'Low', 'close': 'Close', 'volume': 'Volume'}
        df_1m, df_5m = df_1m.rename(columns=rename_map), df_5m.rename(columns=rename_map)
        logging.info(f"Данные для {ticker} успешно загружены: {len(df_1m)} 1m баров, {len(df_5m)} 5m баров.")
        return df_1m, df_5m
    except FileNotFoundError:
        logging.error(f"Файл с данными '{file_path}' не найден. Работа прервана.")
        return pd.DataFrame(), pd.DataFrame()


# --- ДВИЖОК БЭКТЕСТА ---
def run_backtest(df_1m: pd.DataFrame, df_5m: pd.DataFrame, params: Dict[str, Any], config: Config) -> Dict[str, Any]:
    if df_1m.empty or df_5m.empty:
        return {'num_trades': 0, 'stats': pd.Series(dtype=float)}

   """ Основная логика находится тут (вырезана)"""

    try:
        portfolio = vbt.Portfolio.from_signals(
            close=df_1m['Close'],
            entries=entries,
            short_entries=short_entries,
            exits=exits,
            short_exits=short_exits,
            size=config.CAPITAL_SHARE_TO_USE,
            size_type='Percent',
            upon_opposite_entry='Close',
            init_cash=config.INITIAL_CAPITAL,
            fees=config.COMMISSION_PERCENT,
            slippage=config.SLIPPAGE_PERCENT,
            freq='min'
        )

        if portfolio.trades.records.size == 0: return {'num_trades': 0, 'stats': pd.Series(dtype=float)}
        stats = portfolio.stats()
        return {'stats': stats, 'num_trades': stats.get('Total Trades', 0), 'trades': portfolio.trades.records_readable,
                'raw_trades': portfolio.trades.records}
    except Exception as e:
        import traceback
        logging.error(f"Ошибка при расчете портфеля: {e}\n{traceback.format_exc()}")
        return {'num_trades': 0, 'stats': pd.Series(dtype=float)}


# --- ОРКЕСТРАТОР WFA и ИТОГОВАЯ СТАТИСТИКА ---
def run_walk_forward_optimization(config: Config):
    logging.info(f"Логи этого запуска будут сохранены в файл: {log_filename}")
    df_1m, df_5m = load_and_prepare_data(config.TICKER)
    if df_1m.empty: return
    current_date = pd.to_datetime(config.START_DATE, utc=True)
    end_date = pd.to_datetime(config.END_DATE, utc=True)
    train_period = pd.DateOffset(years=config.TRAIN_YEARS)
    test_period = pd.DateOffset(months=config.TEST_MONTHS)
    step_period = pd.DateOffset(months=config.STEP_MONTHS)
    out_of_sample_stats, out_of_sample_trades_dfs, step_num = [], [], 1
    while current_date + train_period + test_period <= end_date:
        train_start, train_end = current_date, current_date + train_period
        test_start, test_end = train_end, train_end + test_period
        df_1m_train, df_5m_train = df_1m.loc[train_start:train_end].copy(), df_5m.loc[train_start:train_end].copy()
        df_1m_test, df_5m_test = df_1m.loc[test_start:test_end].copy(), df_5m.loc[test_start:test_end].copy()
        logging.info(f"\n{'=' * 80}\n--- Шаг {step_num}: Обучение на {train_start.date()} - {train_end.date()} ---")

        def objective(trial: optuna.Trial) -> float:
            params = {
                'donchian_period': trial.suggest_int('donchian_period', 12, 48),
                'sl_percent': trial.suggest_float('sl_percent', 0.5, 5.0, step=0.25),
                'tsl_percent': trial.suggest_float('tsl_percent', 1.0, 10.0, step=0.25),
                # <<< НОВЫЙ ПАРАМЕТР ДЛЯ ОПТИМИЗАЦИИ ФИЛЬТРА >>>
                'ema_period': trial.suggest_int('ema_period', 100, 300)
            }
            metrics = run_backtest(df_1m_train, df_5m_train.copy(), params, config)
            if metrics.get('num_trades', 0) < 20: return -1.0
            stats = metrics.get('stats')
            calmar = -1.0
            if stats is not None and not stats.empty: calmar = stats.get('Calmar Ratio', -1.0)
            return calmar if np.isfinite(calmar) else -1.0

        study = optuna.create_study(direction='maximize', sampler=optuna.samplers.TPESampler(seed=42))
        study.optimize(objective, n_trials=config.N_TRIALS_PER_STEP, n_jobs=-1, show_progress_bar=True)
        best_params, best_value = study.best_params, study.best_value
        logging.info("Обучение завершено.")
        logging.info(f"Лучшие параметры найдены (Целевая метрика Calmar Ratio: {best_value:.2f}):")
        for k, v in best_params.items(): logging.info(f"    {k}: {v}")
        logging.info(
            f"\n--- Результаты на тестовом периоде (Шаг {step_num}: {test_start.date()} - {test_end.date()}) ---")
        metrics_test = run_backtest(df_1m_test, df_5m_test.copy(), best_params, config)
        stats_test = metrics_test.get('stats')
        if stats_test is not None and not stats_test.empty:
            logging.info("Детальная статистика:\n" + str(stats_test))
            if metrics_test.get('num_trades', 0) > 0:
                out_of_sample_stats.append(stats_test)
                trades_df = metrics_test['trades']
                trades_df['step'] = step_num
                out_of_sample_trades_dfs.append(trades_df)
        else:
            logging.warning("    На тестовом периоде сделок не было.")
        current_date += step_period
        step_num += 1
    if out_of_sample_stats:
        summarize_final_results(out_of_sample_stats, out_of_sample_trades_dfs, config)
    else:
        logging.warning("\nЗа весь период walk-forward анализа не было совершено ни одной сделки.")


def summarize_final_results(stats_list: list, trades_df_list: list, config: Config):
    logging.info(f"\n{'=' * 80}\n--- СВОДНАЯ СТАТИСТИКА ПО ТЕСТОВЫМ ПЕРИОДАМ ({config.TICKER}) ---")
    if not stats_list:
        logging.warning("Итоговая статистика не может быть рассчитана, так как не было ни одной сделки.")
        return
    summary_df = pd.concat(stats_list, axis=1)
    summary_df.columns = [f'Шаг {i + 1}' for i in range(len(stats_list))]
    numeric_summary = summary_df.select_dtypes(include=np.number)
    summary_df['Среднее'], summary_df['Ст. отклонение'] = numeric_summary.mean(axis=1), numeric_summary.std(axis=1)
    key_metrics = ['Total Return [%]', 'Max Drawdown [%]', 'Win Rate [%]', 'Profit Factor', 'Calmar Ratio',
                   'Sharpe Ratio', 'Sortino Ratio', 'Total Trades']
    display_summary = summary_df.reindex(key_metrics)
    logging.info("Сравнение ключевых метрик по out-of-sample периодам:")
    with pd.option_context('display.max_rows', None, 'display.max_columns', None, 'display.width', 120):
        logging.info("\n" + str(display_summary.round(2)))
    if trades_df_list:
        all_trades_df = pd.concat(trades_df_list, ignore_index=True)
        trades_filename = f'wfa_all_trades_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
        all_trades_df.to_csv(trades_filename)
        logging.info(f"\nПолный список всех сделок сохранен в файл: {trades_filename}")


if __name__ == "__main__":
    script_config = Config()
    logging.info(f"Запуск WFA для гипотезы SuperTrend на тикере: {script_config.TICKER}...")
    run_walk_forward_optimization(script_config)
    logging.info(f"\n--- Процесс для {script_config.TICKER} завершен. ---")
